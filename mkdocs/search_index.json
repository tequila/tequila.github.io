{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to Tequila Project\n\u00b6\n\n\nTequila Project is an organization that creates open-source solutions.\nWe love PHP and MongoDB, therefore our main projects are dedicated to integration\nof this technologies. Our core projects are:\n\n\n\n\nTequila MongoDB ODM\n - a simple and\nvery fast MongoDB Object Document Mapper for PHP 5.6 and PHP 7 with Doctrine-like syntax.\n\n\nTequila MongoDB PHP Lib\n - a high-level\ndriver for MongoDB, written in PHP.\n\n\n\n\nThere is also integrations for our libraries with PHP frameworks:\n\n\n\n\nTequila MongoDB Pimple service provider\n - a service provider,\nwhich integrates \nTequila MongoDB PHP Lib\n with \nPimple\n Dependency Injection Container and \nSilex\n framework.\n\n\nTequila MongoDB ODM Pimple service provider\n - a service provider,\nwhich integrates \nTequila MongoDB ODM\n with  \nPimple\n Dependency Injection Container and \nSilex\n framework.\n\n\nTequila MongoDB ODM Bundle\n - Symfony Bundle, which integrates \nTequila MongoDB ODM\n\nwith \nSymfony\n framework.\n\n\n\n\nOn this site you cand find docs and articles about our projects.",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-tequila-project",
            "text": "Tequila Project is an organization that creates open-source solutions.\nWe love PHP and MongoDB, therefore our main projects are dedicated to integration\nof this technologies. Our core projects are:   Tequila MongoDB ODM  - a simple and\nvery fast MongoDB Object Document Mapper for PHP 5.6 and PHP 7 with Doctrine-like syntax.  Tequila MongoDB PHP Lib  - a high-level\ndriver for MongoDB, written in PHP.   There is also integrations for our libraries with PHP frameworks:   Tequila MongoDB Pimple service provider  - a service provider,\nwhich integrates  Tequila MongoDB PHP Lib  with  Pimple  Dependency Injection Container and  Silex  framework.  Tequila MongoDB ODM Pimple service provider  - a service provider,\nwhich integrates  Tequila MongoDB ODM  with   Pimple  Dependency Injection Container and  Silex  framework.  Tequila MongoDB ODM Bundle  - Symfony Bundle, which integrates  Tequila MongoDB ODM \nwith  Symfony  framework.   On this site you cand find docs and articles about our projects.",
            "title": "Welcome to Tequila Project"
        },
        {
            "location": "/mongodb-php-lib/",
            "text": "Getting started\n\u00b6\n\n\nThis high-level MongoDB driver was created to replace\n\nLegacy MongoDB PHP Driver\n,\ni.e. \npecl/mongo\n PHP extension, which for now is deprecated and does not work with PHP 7.\nThis library is based on the new official low-level \nMongoDB PHP Driver\n,\nfollows \nMongoDB Driver Specifications\n\nand defines abstractions like \nClient\n, \nDatabase\n, \nCollection\n etc.\n\n\nInstallation\n\u00b6\n\n\nSince this library is based on a new low-level driver, it requires this driver to be installed:\n\n\nsudo pecl install mongodb\n\n\n\n\n\nThe library itself should be installed by Composer:\n\n\ncomposer require tequila/mongodb-php-lib\n\n\n\n\n\nUsage\n\u00b6\n\n\nAll new drivers for MongoDB should follow \nMongoDB Driver Specifications\n.\nBy following this specifications, this library introduces different changes beside the API\nof the legacy driver.\nBelow there are examples of how to do common tasks using this driver in comparison with the API of the legacy driver:\n\n\nCRUD\n\u00b6\n\n\nInsert one document\n\u00b6\n\n\nUsing this driver:\n\n\n<?php\n\n\n\n$client\n \n=\n \nnew\n \n\\Tequila\\MongoDB\\Client\n(\n'mongodb://127.0.0.1/'\n);\n\n\n$collection\n \n=\n \n$client\n->\nselectCollection\n(\n'test'\n,\n \n'test'\n);\n\n\n$collection\n->\ninsertOne\n([\n'foo'\n \n=>\n \n'bar'\n]);\n\n\n\n\n\n\nUsing the legacy driver:\n\n\n<?php\n\n\n\n$client\n \n=\n \nnew\n \n\\MongoClient\n(\n'mongodb://127.0.0.1/'\n);\n\n\n$collection\n \n=\n \n$client\n->\nselectCollection\n(\n'test'\n,\n \n'test'\n);\n\n\n$collection\n->\ninsert\n([\n'foo'\n \n=>\n \n'bar'\n]);\n\n\n\n\n\n\nInsert many documents\n\u00b6\n\n\nUsing this driver:\n\n\n<?php\n\n\n\n/** @var \\Tequila\\MongoDB\\Collection $collection */\n\n\n$collection\n->\ninsertMany\n([\n\n    \n[\n'foo'\n \n=>\n \n'bar'\n],\n\n    \n[\n'bar'\n \n=>\n \n'baz'\n],\n\n    \n[\n'baz'\n \n=>\n \n'foo'\n],\n\n\n]);\n\n\n\n\n\n\nUsing the legacy driver:\n\n\n<?php\n\n\n\n/** @var \\MongoCollection $collection */\n\n\n$batch\n \n=\n \nnew\n \n\\MongoInsertBatch\n(\n$collection\n);\n\n\n$batch\n->\nadd\n([\n'foo'\n \n=>\n \n'bar'\n]);\n\n\n$batch\n->\nadd\n([\n'bar'\n \n=>\n \n'baz'\n]);\n\n\n$batch\n->\nadd\n([\n'baz'\n \n=>\n \n'foo'\n]);\n\n\n\n$batch\n->\nexecute\n();\n\n\n\n\n\n\nUpdate one document\n\u00b6\n\n\nUsing this driver:\n\n\n<?php\n\n\n\nuse\n \nMongoDB\\BSON\\UTCDateTime\n;\n\n\n\n/** @var \\Tequila\\MongoDB\\Collection $collection */\n\n\n$collection\n->\nupdateOne\n([\n'foo'\n \n=>\n \n'bar'\n],\n \n[\n'$set'\n \n=>\n \n[\n'updated_at'\n \n=>\n \nnew\n \nUTCDateTime\n()]]);\n\n\n\n\n\n\nUsing the legacy driver:\n\n\n<?php\n\n\n\n/** @var \\MongoCollection $collection */\n\n\n$collection\n->\nupdate\n(\n\n    \n[\n'foo'\n \n=>\n \n'bar'\n],\n\n    \n[\n'$set'\n \n=>\n \n[\n'updated_at'\n \n=>\n \nnew\n \n\\MongoDate\n()]],\n\n    \n[\n'multiple'\n \n=>\n \nfalse\n]\n\n\n);\n\n\n\n\n\n\nReplace one document\n\u00b6\n\n\nUsing this driver:\n\n\n<?php\n\n\n\n// Collection::replaceOne() will trow an exception if a second argument contains\n\n\n// update operators like $inc, $set etc.\n\n\n// Collection::updateOne() will throw an exception if a second argument is a replacement document.\n\n\n\n/** @var \\Tequila\\MongoDB\\Collection $collection */\n\n\n$collection\n->\nreplaceOne\n([\n'foo'\n \n=>\n \n'bar'\n],\n \n[\n'bar'\n \n=>\n \n'baz'\n]);\n\n\n\n\n\n\nUsing the legacy driver:\n\n\n<?php\n\n\n\n/** @var \\MongoCollection $collection */\n\n\n$collection\n->\nupdate\n(\n\n    \n[\n'foo'\n \n=>\n \n'bar'\n],\n\n    \n[\n'bar'\n \n=>\n \n'baz'\n],\n\n    \n[\n'multiple'\n \n=>\n \nfalse\n]\n\n\n);\n\n\n\n\n\n\nUpdate many documents\n\u00b6\n\n\nUsing this driver:\n\n\n<?php\n\n\n\n/** @var \\Tequila\\MongoDB\\Collection $collection */\n\n\n$collection\n->\nupdateMany\n(\n\n    \n[\n'foo'\n \n=>\n \n[\n'$exists'\n \n=>\n \ntrue\n]],\n\n    \n[\n'$set'\n \n=>\n \n[\n'isTestDocument'\n \n=>\n \ntrue\n]]\n\n\n);\n\n\n\n\n\n\nUsing the legacy driver:\n\n\n<?php\n\n\n\n/** @var \\MongoCollection $collection */\n\n\n$collection\n->\nupdate\n(\n\n    \n[\n'foo'\n \n=>\n \n[\n'$exists'\n \n=>\n \ntrue\n]],\n\n    \n[\n'$set'\n \n=>\n \n[\n'isTestDocument'\n \n=>\n \ntrue\n]],\n\n    \n[\n'multiple'\n \n=>\n \ntrue\n]\n\n\n);\n\n\n\n\n\n\nDelete one document\n\u00b6\n\n\nUsing this driver:\n\n\n<?php\n\n\n\n/** @var \\Tequila\\MongoDB\\Collection $collection */\n\n\n$collection\n->\ndeleteOne\n([\n'foo'\n \n=>\n \n'bar'\n]);\n\n\n\n\n\n\nUsing the legacy driver:\n\n\n<?php\n\n\n\n/** @var \\MongoCollection $collection */\n\n\n$collection\n->\nremove\n([\n'foo'\n \n=>\n \n'bar'\n],\n \n[\n'justOne'\n \n=>\n \ntrue\n]);\n\n\n\n\n\n\nDelete many documents\n\u00b6\n\n\nUsing this driver:\n\n\n<?php\n\n\n\n/** @var \\Tequila\\MongoDB\\Collection $collection */\n\n\n$collection\n->\ndeleteMany\n([\n'foo'\n \n=>\n \n'bar'\n]);\n\n\n\n\n\n\nUsing the legacy driver:\n\n\n<?php\n\n\n\n/** @var \\MongoCollection $collection */\n\n\n$collection\n->\nremove\n([\n'foo'\n \n=>\n \n'bar'\n],\n \n[\n'justOne'\n \n=>\n \nfalse\n]);\n\n\n\n\n\n\nBulk writes\n\u00b6\n\n\nLegacy driver supports bulk writes of the same type, e.g. bulk inserts, bulk updates or bulk deletes.\nFor this tasks legacy driver has three classes - \n\\MongoInsertBatch\n, \n\\MongoUpdateBatch\n\nand \n\\MongoDeleteBatch\n. To add operation to a batch, you must use a weird syntax:\n\n\n<?php\n\n\n\n/** @var \\MongoCollection $collection */\n\n\n$batch\n \n=\n \nnew\n \n\\MongoUpdateBatch\n(\n$collection\n);\n\n\n\n$batch\n->\nadd\n([\n\n    \n'q'\n \n=>\n \n[\n'foo'\n \n=>\n \n'bar'\n],\n \n// query (filter) document\n\n    \n'u'\n \n=>\n \n[\n'set'\n \n=>\n \n[\n'updated_at'\n \n=>\n \nnew\n \n\\MongoDate\n()]]\n \n// update document\n\n\n]);\n\n\n\n$batch\n->\nexecute\n();\n\n\n\n\n\n\nThe new low-level MongoDB driver allows to mix different types of writes in one bulk.\nThis means that you could add different write operations to one bulk, and even chain\nthis operations, for example insert a document and than update many documents, including\ninserted one.\nThe MongoDB Driver Specifications has a definition of \"write models\".\nWrite model - is an object that specifies the type of write operation and it's arguments.\nTequila MongoDB PHP Lib implements all write models from driver specifications.\nThere are 6 write model classes: \nInsertOne\n, \nUpdateOne\n, \nUpdateMany\n, \nReplaceOne\n,\n\nDeleteOne\n and \nDeleteMany\n. All this classes reside in namespace \nTequila\\MongoDB\\Write\\Model\n.\n\n\nHere is an example of bulk writes functionality usage in this driver:\n\n\n<?php\n\n\n\nuse\n \nTequila\\MongoDB\\Write\\Model\\InsertOne\n;\n\n\nuse\n \nTequila\\MongoDB\\Write\\Model\\UpdateMany\n;\n\n\nuse\n \nTequila\\MongoDB\\Write\\Model\\UpdateOne\n;\n\n\nuse\n \nTequila\\MongoDB\\Write\\Model\\DeleteMany\n;\n\n\n\n/** @var \\Tequila\\MongoDB\\Collection $collection */\n\n\n$collection\n->\nbulkWrite\n([\n\n    \nnew\n \nInsertOne\n([\n'firstName'\n \n=>\n \n'Trevor'\n,\n \n'lastName'\n \n=>\n \n'Philips'\n]),\n\n    \nnew\n \nInsertOne\n([\n'firstName'\n \n=>\n \n'Michael'\n,\n \n'lastName'\n \n=>\n \n'De Santa'\n]),\n\n    \nnew\n \nInsertOne\n([\n'firstName'\n \n=>\n \n'Franklin'\n,\n \n'lastName'\n \n=>\n \n'Clinton'\n]),\n\n    \nnew\n \nInsertOne\n([\n'firstName'\n \n=>\n \n'Bradley'\n,\n \n'lastName'\n \n=>\n \n'Snider'\n]),\n\n    \nnew\n \nUpdateMany\n([],\n \n[\n'$set'\n \n=>\n \n[\n'sex'\n \n=>\n \n'male'\n]]),\n\n    \nnew\n \nUpdateOne\n([\n'firstName'\n \n=>\n \n'Bradley'\n],\n \n[\n'$set'\n \n=>\n \n[\n'alive'\n \n=>\n \nfalse\n]]),\n\n    \nnew\n \nDeleteMany\n([\n'alive'\n \n=>\n \nfalse\n]),\n\n\n]);\n\n\n\n$cursor\n \n=\n \n$collection\n->\nfind\n();\n\n\n\necho\n \n$cursor\n->\ncurrent\n()[\n'firstName'\n];\n \n// outputs \"Trevor\"\n\n\necho\n \n$cursor\n->\ncurrent\n()[\n'sex'\n];\n \n// outputs \"male\"\n\n\n\n$collection\n->\nfindOne\n([\n'firstName'\n \n=>\n \n'Bradley'\n]);\n \n// returns null\n\n\n\n\n\n\nWrite results\n\u00b6\n\n\nThe only way to insert, delete or update documents in collection is to use\nthe bulk write API, provided by the low-level driver.\nAt high-level, bulk writes are done using \nTequila\\MongoDB\\Collection::bulkWrite()\n\nmethod and write models (see example above).\nThis method returns an instance of \nTequila\\MongoDB\\WriteResult\n class.\nThis class wraps the \nMongoDB\\Driver\\WriteResult\n class and adds functionality of inserted ids.\nOther write methods, such as \nCollection::insertOne()\n or \nCollection::updateMany()\n\ninternally use \nCollection::bulkWrite()\n method and wrap \nTequila\\MongoDB\\WriteResult\n\nto provide their results, such as \nTequila\\MongoDB\\Write\\Result\\InsertOneResult\n\nor \nTequila\\MongoDB\\Write\\Result\\UpdateResult\n.\n\n\nId of inserted document\n\u00b6\n\n\nThe legacy driver takes care of setting the id of inserted document to this document.\nNew driver does not do this, and it's up to user to decide, what to do with id of an inserted document:\n\n\n<?php\n\n\n\n/** @var \\Tequila\\MongoDB\\Collection $collection */\n\n\n$document\n \n=\n \nnew\n \n\\stdClass\n();\n\n\n$document\n->\nfirstName\n \n=\n \n'Trevor'\n;\n\n\n$document\n->\nlastName\n \n=\n \n'Philips'\n;\n\n\n\n/** @var \\Tequila\\MongoDB\\Write\\Result\\InsertOneResult $result */\n\n\n$result\n \n=\n \n$collection\n->\ninsertOne\n(\n$document\n);\n\n\n$document\n->\n_id\n \n=\n \n$result\n->\ngetInsertedId\n();\n\n\n\n// or, for a bulk inserts:\n\n\n$documents\n \n=\n \n[\n\n    \n[\n'firstName'\n \n=>\n \n'Trevor'\n,\n \n'lastName'\n \n=>\n \n'Philips'\n],\n\n    \n[\n'firstName'\n \n=>\n \n'Michael'\n,\n \n'lastName'\n \n=>\n \n'De Santa'\n],\n\n    \n[\n'firstName'\n \n=>\n \n'Franklin'\n,\n \n'lastName'\n \n=>\n \n'Clinton'\n],\n\n\n];\n\n\n\n/** @var \\Tequila\\MongoDB\\Write\\Result\\InsertManyResult $result */\n\n\n$result\n \n=\n \n$collection\n->\ninsertMany\n(\n$documents\n);\n\n\n\n// InsertManyResult::getInsertedIds() and WriteResult::getInsertedIds() returns\n\n\n// an array of inserted ids, where the key is the position of the inserted document\n\n\n// and value is an id.\n\n\nforeach\n \n(\n$result\n->\ngetInsertedIds\n()\n \nas\n \n$position\n \n=>\n \n$id\n)\n \n{\n\n    \n$documents\n[\n$position\n][\n'_id'\n]\n \n=\n \n$id\n;\n\n\n}",
            "title": "MongoDB PHP Lib"
        },
        {
            "location": "/mongodb-php-lib/#getting-started",
            "text": "This high-level MongoDB driver was created to replace Legacy MongoDB PHP Driver ,\ni.e.  pecl/mongo  PHP extension, which for now is deprecated and does not work with PHP 7.\nThis library is based on the new official low-level  MongoDB PHP Driver ,\nfollows  MongoDB Driver Specifications \nand defines abstractions like  Client ,  Database ,  Collection  etc.",
            "title": "Getting started"
        },
        {
            "location": "/mongodb-php-lib/#installation",
            "text": "Since this library is based on a new low-level driver, it requires this driver to be installed:  sudo pecl install mongodb  The library itself should be installed by Composer:  composer require tequila/mongodb-php-lib",
            "title": "Installation"
        },
        {
            "location": "/mongodb-php-lib/#usage",
            "text": "All new drivers for MongoDB should follow  MongoDB Driver Specifications .\nBy following this specifications, this library introduces different changes beside the API\nof the legacy driver.\nBelow there are examples of how to do common tasks using this driver in comparison with the API of the legacy driver:",
            "title": "Usage"
        },
        {
            "location": "/mongodb-php-lib/#crud",
            "text": "",
            "title": "CRUD"
        },
        {
            "location": "/mongodb-php-lib/#insert-one-document",
            "text": "Using this driver:  <?php  $client   =   new   \\Tequila\\MongoDB\\Client ( 'mongodb://127.0.0.1/' );  $collection   =   $client -> selectCollection ( 'test' ,   'test' );  $collection -> insertOne ([ 'foo'   =>   'bar' ]);   Using the legacy driver:  <?php  $client   =   new   \\MongoClient ( 'mongodb://127.0.0.1/' );  $collection   =   $client -> selectCollection ( 'test' ,   'test' );  $collection -> insert ([ 'foo'   =>   'bar' ]);",
            "title": "Insert one document"
        },
        {
            "location": "/mongodb-php-lib/#insert-many-documents",
            "text": "Using this driver:  <?php  /** @var \\Tequila\\MongoDB\\Collection $collection */  $collection -> insertMany ([ \n     [ 'foo'   =>   'bar' ], \n     [ 'bar'   =>   'baz' ], \n     [ 'baz'   =>   'foo' ],  ]);   Using the legacy driver:  <?php  /** @var \\MongoCollection $collection */  $batch   =   new   \\MongoInsertBatch ( $collection );  $batch -> add ([ 'foo'   =>   'bar' ]);  $batch -> add ([ 'bar'   =>   'baz' ]);  $batch -> add ([ 'baz'   =>   'foo' ]);  $batch -> execute ();",
            "title": "Insert many documents"
        },
        {
            "location": "/mongodb-php-lib/#update-one-document",
            "text": "Using this driver:  <?php  use   MongoDB\\BSON\\UTCDateTime ;  /** @var \\Tequila\\MongoDB\\Collection $collection */  $collection -> updateOne ([ 'foo'   =>   'bar' ],   [ '$set'   =>   [ 'updated_at'   =>   new   UTCDateTime ()]]);   Using the legacy driver:  <?php  /** @var \\MongoCollection $collection */  $collection -> update ( \n     [ 'foo'   =>   'bar' ], \n     [ '$set'   =>   [ 'updated_at'   =>   new   \\MongoDate ()]], \n     [ 'multiple'   =>   false ]  );",
            "title": "Update one document"
        },
        {
            "location": "/mongodb-php-lib/#replace-one-document",
            "text": "Using this driver:  <?php  // Collection::replaceOne() will trow an exception if a second argument contains  // update operators like $inc, $set etc.  // Collection::updateOne() will throw an exception if a second argument is a replacement document.  /** @var \\Tequila\\MongoDB\\Collection $collection */  $collection -> replaceOne ([ 'foo'   =>   'bar' ],   [ 'bar'   =>   'baz' ]);   Using the legacy driver:  <?php  /** @var \\MongoCollection $collection */  $collection -> update ( \n     [ 'foo'   =>   'bar' ], \n     [ 'bar'   =>   'baz' ], \n     [ 'multiple'   =>   false ]  );",
            "title": "Replace one document"
        },
        {
            "location": "/mongodb-php-lib/#update-many-documents",
            "text": "Using this driver:  <?php  /** @var \\Tequila\\MongoDB\\Collection $collection */  $collection -> updateMany ( \n     [ 'foo'   =>   [ '$exists'   =>   true ]], \n     [ '$set'   =>   [ 'isTestDocument'   =>   true ]]  );   Using the legacy driver:  <?php  /** @var \\MongoCollection $collection */  $collection -> update ( \n     [ 'foo'   =>   [ '$exists'   =>   true ]], \n     [ '$set'   =>   [ 'isTestDocument'   =>   true ]], \n     [ 'multiple'   =>   true ]  );",
            "title": "Update many documents"
        },
        {
            "location": "/mongodb-php-lib/#delete-one-document",
            "text": "Using this driver:  <?php  /** @var \\Tequila\\MongoDB\\Collection $collection */  $collection -> deleteOne ([ 'foo'   =>   'bar' ]);   Using the legacy driver:  <?php  /** @var \\MongoCollection $collection */  $collection -> remove ([ 'foo'   =>   'bar' ],   [ 'justOne'   =>   true ]);",
            "title": "Delete one document"
        },
        {
            "location": "/mongodb-php-lib/#delete-many-documents",
            "text": "Using this driver:  <?php  /** @var \\Tequila\\MongoDB\\Collection $collection */  $collection -> deleteMany ([ 'foo'   =>   'bar' ]);   Using the legacy driver:  <?php  /** @var \\MongoCollection $collection */  $collection -> remove ([ 'foo'   =>   'bar' ],   [ 'justOne'   =>   false ]);",
            "title": "Delete many documents"
        },
        {
            "location": "/mongodb-php-lib/#bulk-writes",
            "text": "Legacy driver supports bulk writes of the same type, e.g. bulk inserts, bulk updates or bulk deletes.\nFor this tasks legacy driver has three classes -  \\MongoInsertBatch ,  \\MongoUpdateBatch \nand  \\MongoDeleteBatch . To add operation to a batch, you must use a weird syntax:  <?php  /** @var \\MongoCollection $collection */  $batch   =   new   \\MongoUpdateBatch ( $collection );  $batch -> add ([ \n     'q'   =>   [ 'foo'   =>   'bar' ],   // query (filter) document \n     'u'   =>   [ 'set'   =>   [ 'updated_at'   =>   new   \\MongoDate ()]]   // update document  ]);  $batch -> execute ();   The new low-level MongoDB driver allows to mix different types of writes in one bulk.\nThis means that you could add different write operations to one bulk, and even chain\nthis operations, for example insert a document and than update many documents, including\ninserted one.\nThe MongoDB Driver Specifications has a definition of \"write models\".\nWrite model - is an object that specifies the type of write operation and it's arguments.\nTequila MongoDB PHP Lib implements all write models from driver specifications.\nThere are 6 write model classes:  InsertOne ,  UpdateOne ,  UpdateMany ,  ReplaceOne , DeleteOne  and  DeleteMany . All this classes reside in namespace  Tequila\\MongoDB\\Write\\Model .  Here is an example of bulk writes functionality usage in this driver:  <?php  use   Tequila\\MongoDB\\Write\\Model\\InsertOne ;  use   Tequila\\MongoDB\\Write\\Model\\UpdateMany ;  use   Tequila\\MongoDB\\Write\\Model\\UpdateOne ;  use   Tequila\\MongoDB\\Write\\Model\\DeleteMany ;  /** @var \\Tequila\\MongoDB\\Collection $collection */  $collection -> bulkWrite ([ \n     new   InsertOne ([ 'firstName'   =>   'Trevor' ,   'lastName'   =>   'Philips' ]), \n     new   InsertOne ([ 'firstName'   =>   'Michael' ,   'lastName'   =>   'De Santa' ]), \n     new   InsertOne ([ 'firstName'   =>   'Franklin' ,   'lastName'   =>   'Clinton' ]), \n     new   InsertOne ([ 'firstName'   =>   'Bradley' ,   'lastName'   =>   'Snider' ]), \n     new   UpdateMany ([],   [ '$set'   =>   [ 'sex'   =>   'male' ]]), \n     new   UpdateOne ([ 'firstName'   =>   'Bradley' ],   [ '$set'   =>   [ 'alive'   =>   false ]]), \n     new   DeleteMany ([ 'alive'   =>   false ]),  ]);  $cursor   =   $collection -> find ();  echo   $cursor -> current ()[ 'firstName' ];   // outputs \"Trevor\"  echo   $cursor -> current ()[ 'sex' ];   // outputs \"male\"  $collection -> findOne ([ 'firstName'   =>   'Bradley' ]);   // returns null",
            "title": "Bulk writes"
        },
        {
            "location": "/mongodb-php-lib/#write-results",
            "text": "The only way to insert, delete or update documents in collection is to use\nthe bulk write API, provided by the low-level driver.\nAt high-level, bulk writes are done using  Tequila\\MongoDB\\Collection::bulkWrite() \nmethod and write models (see example above).\nThis method returns an instance of  Tequila\\MongoDB\\WriteResult  class.\nThis class wraps the  MongoDB\\Driver\\WriteResult  class and adds functionality of inserted ids.\nOther write methods, such as  Collection::insertOne()  or  Collection::updateMany() \ninternally use  Collection::bulkWrite()  method and wrap  Tequila\\MongoDB\\WriteResult \nto provide their results, such as  Tequila\\MongoDB\\Write\\Result\\InsertOneResult \nor  Tequila\\MongoDB\\Write\\Result\\UpdateResult .",
            "title": "Write results"
        },
        {
            "location": "/mongodb-php-lib/#id-of-inserted-document",
            "text": "The legacy driver takes care of setting the id of inserted document to this document.\nNew driver does not do this, and it's up to user to decide, what to do with id of an inserted document:  <?php  /** @var \\Tequila\\MongoDB\\Collection $collection */  $document   =   new   \\stdClass ();  $document -> firstName   =   'Trevor' ;  $document -> lastName   =   'Philips' ;  /** @var \\Tequila\\MongoDB\\Write\\Result\\InsertOneResult $result */  $result   =   $collection -> insertOne ( $document );  $document -> _id   =   $result -> getInsertedId ();  // or, for a bulk inserts:  $documents   =   [ \n     [ 'firstName'   =>   'Trevor' ,   'lastName'   =>   'Philips' ], \n     [ 'firstName'   =>   'Michael' ,   'lastName'   =>   'De Santa' ], \n     [ 'firstName'   =>   'Franklin' ,   'lastName'   =>   'Clinton' ],  ];  /** @var \\Tequila\\MongoDB\\Write\\Result\\InsertManyResult $result */  $result   =   $collection -> insertMany ( $documents );  // InsertManyResult::getInsertedIds() and WriteResult::getInsertedIds() returns  // an array of inserted ids, where the key is the position of the inserted document  // and value is an id.  foreach   ( $result -> getInsertedIds ()   as   $position   =>   $id )   { \n     $documents [ $position ][ '_id' ]   =   $id ;  }",
            "title": "Id of inserted document"
        }
    ]
}